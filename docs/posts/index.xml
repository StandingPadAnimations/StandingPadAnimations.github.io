<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on StandingPad&#39;s Corner</title>
        <link>https://standingpadanimations.github.io/posts/</link>
        <description>Recent content in Posts on StandingPad&#39;s Corner</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Wed, 21 Dec 2022 04:30:44 -0600</lastBuildDate>
        <atom:link href="https://standingpadanimations.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Understanding Cycles Optimization: The Magic Behind Scrambling Pixels like Eggs</title>
            <link>https://standingpadanimations.github.io/posts/automatic-scrambling-distance/</link>
            <pubDate>Wed, 21 Dec 2022 04:30:44 -0600</pubDate>
            
            <guid>https://standingpadanimations.github.io/posts/automatic-scrambling-distance/</guid>
            <description>After I made my post yesterday regarding samples and light bounces, I was asked by a buddy a pretty interesting question.
I try to avoid making certain settings seem &amp;ldquo;magical&amp;rdquo; because with all magic, there&amp;rsquo;s a downside. For GPU rendering (sorry CPU renderers, this setting brings no benifit to y&amp;rsquo;all), one of these settings is known as
Automatic Scrambling Distance
While this setting does help with render times a lot, it also requires a lot of tweaking to make it render with little artifacts.</description>
            <content type="html"><![CDATA[<p>After I made my post yesterday regarding samples and light bounces, I was asked by a buddy a pretty interesting question.</p>

    <img src="/imgs/cycles-2/bean-question.png"  alt="Buddy asking question"  class="center"  style="border-radius: 8px;"  />


<p>I try to avoid making certain settings seem &ldquo;magical&rdquo; because with all magic, there&rsquo;s a downside. For GPU rendering (sorry CPU renderers, this setting brings no benifit to y&rsquo;all), one of these settings is known as</p>
<p><strong>Automatic Scrambling Distance</strong></p>
<p>While this setting does help with render times a lot, it also requires a lot of tweaking to make it render with little artifacts. I think the best way to make configuring this faster is to understand how it works under the hood.</p>
<h1 id="why-scramble-pixels-like-eggs">Why Scramble Pixels like Eggs?</h1>
<p>In a nutshell, scrambling distance represents how randomized each pixel&rsquo;s randomness value is. We talked about samples in <a href="https://standingpadanimations.github.io/posts/cycles-optimization/#samples">my last post</a>, so I suggest reading that first to get an understanding about what samples are.</p>
<p>&ldquo;Wait what?&rdquo;</p>
<p>I was confused at first, so I asked on the Erindale.xyz server (basically a lot of Blender nerds). After some back and forth, I got the following response.</p>

    <img src="/imgs/cycles-2/jc-response.png"  alt="JC explaining what scrambling does"  class="center"  style="border-radius: 8px;"  />


<p>&ldquo;I still don&rsquo;t get it.&rdquo;</p>
<p>Alright, let me make a diagram. Here&rsquo;s with a scrambling distance of 1.</p>

    <img src="/imgs/cycles-2/random-pixels.png"  alt="Pixels with random values"  class="center"  style="border-radius: 8px;"  />


<p>Here, each pixel have a randomized value+ and Cycles uses that to further randomize the samples that it spews into the scene (remember, samples are on a per pixel basis)</p>
<p><code>+ This should be more randomized, but it's a quick sketch</code></p>
<p>Now here&rsquo;s with a scrambling distance of 0.

    <img src="/imgs/cycles-2/uniform-pixels.png"  alt="Pixels with uniform values"  class="center"  style="border-radius: 8px;"  />

</p>
<p>The higher the scrambling distance, the more randomized these values are.</p>
<p>&ldquo;So if set to 0, there&rsquo;s no randomness with samples?&rdquo;</p>
<p>Not exactly. Samples must be released randomly to get finer details. Scrambling distance just makes things more random.</p>
<p>&ldquo;Oh I get it, so automatic scrambling distance just sets this automatically?&rdquo;</p>
<p>Yes.</p>
<p>&ldquo;But why does this feature help with render times? And what artifacts occur with it?&rdquo;</p>
<p>That brings us on to our next topic.</p>
<h1 id="all-magic-has-a-cost">All Magic has a Cost</h1>
<p>As I mentioned earlier, automatic scrambling distance can introduce some artifts, but can also massively help GPU users with render times.</p>
<p>But how does reducing pixel randomness help with render times?</p>
<p>This took a while to find. The Blender Docs say the following:</p>
<blockquote>
<p>Lower values Reduce randomization between pixels to improve GPU rendering performance, at the cost of possible rendering artifacts if set too low.</p>
</blockquote>
<p>Presumably it has something to do with VRAM, but I can&rsquo;t be exactly sure. My best guess from past experiance is that rendering is faster with more complex geometry, but I can&rsquo;t be exactly sure.</p>
<p>So what are some possible artifacts? Well JC has an example.

    <img src="/imgs/cycles-2/artifacts.png"  alt="Artifacts caused by an extremely low scrambling distance"  class="center"  style="border-radius: 8px;"  />

</p>
<p>Yikes, why does this happen?</p>
<p>It seems to go back to why path tracers try to randomize samples as much as possible: to get finer details about the geometry.</p>
<p>As you can see, all magic comes at a cost.</p>
<p>&ldquo;So why use it?&rdquo;</p>
<p>Because if used correctly, render times can be reduced 10 fold. It also tends to result in cleaner images, which when combined with adaptive sampling (I promise I&rsquo;ll make a detailed explanation on that sometime) can reduce render times. After all, the main reason we put up with long render times is to reduce the amount of noise in our scene.</p>
<p>&ldquo;So, should I use it?&rdquo;</p>
<p>If you use CPU rendering, no, it brings more issues for little benifit. If you use GPU rendering, then it depends on the scene. Personally, I just test it for each scene I do, then try to adjust the <strong>scrambling multiplier</strong> setting (which goes hand in hand to Automatic Scrambling Distance) before deciding if the artifacts are worth it. I don&rsquo;t use it most of the time (it really hates alpha transparency which I deal with a lot), but when I do it does work well.</p>
<p>That being said, it depends on the scene. There&rsquo;s never a specific number I can give that will automatically reduce render times (that&rsquo;s kinda the point behind making these posts).</p>
<p>I think that&rsquo;s all I really need to explain about Automatic Scrambling Distance. I&rsquo;ll see y&rsquo;all in the next post.</p>
]]></content>
        </item>
        
        <item>
            <title>Understanding Cycles Optimization: Spewing Samples and Bouncing Around like Crazy</title>
            <link>https://standingpadanimations.github.io/posts/cycles-optimization/</link>
            <pubDate>Tue, 20 Dec 2022 12:17:42 -0600</pubDate>
            
            <guid>https://standingpadanimations.github.io/posts/cycles-optimization/</guid>
            <description>Introduction We know Cycles is a pain in the butt to render. Specifically, the long render times. Of course, there&amp;rsquo;s tons of videos that talk about what settings to use, but those videos don&amp;rsquo;t explain what the settings do. So, exactly what settings do what?
Samples What are samples? In a nutshell, samples are rays, and the sample count represents how many rays are released by Cycles per pixel+ of the camera (yes Cycles starts from the camera as an optimization, all optical systems can be reversed).</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>We know Cycles is a pain in the butt to render. Specifically, the long render times. Of course, there&rsquo;s tons of videos that talk about what settings to use, but those videos don&rsquo;t explain what the settings do. So, exactly what settings do what?</p>
<h2 id="samples">Samples</h2>
<p>What are samples? In a nutshell, samples are rays, and the sample count represents how many rays are released by Cycles <strong>per pixel</strong>+ of the camera (yes Cycles starts from the camera as an optimization, all optical systems can be reversed).</p>
<p><code>+ Note: the per pixel thing is why higher resolutions take longer to render compared to lower resolutions. More pixels means more rays for your computer to deal with</code></p>
<p>Just understanding how Cycles works helps to understand how the rest of the settings to work.</p>
<p>So how is noise produced?</p>
<p>Well when Cycles spews rays like a toddler, those rays have to eventually meet a light source. This is called convergence, and the better rays can &ldquo;converge&rdquo; with light sources, the less noise the render will have. That&rsquo;s why bright scenes tend to have way less noise then dark scenes.</p>
<p>But when your scene doesn&rsquo;t allow for rays to converge easily, you need more samples (or rays) to make up for the bad convergence+</p>
<p><code>+ You could also make the scene brighter and reduce the exposure to make it darker, that's pretty common</code></p>
<p>Here&rsquo;s a totally amazing diagram explaining what I mean</p>

    <img src="/imgs/cycles-1/rays.png"  alt="Rays bouncing around"  class="center"  style="border-radius: 8px;"  />


<p>Here, we have a bunch of rays converging with the light source, but some also miss and go to the void.</p>
<hr>
<p>So now we understand how samples work, and why darker scenes tend to have less noise, so let&rsquo;s move on</p>
<p><code>Sidenote: You've probably heard of features like adaptive sampling and light portals. I personally think Blender's docs are good enough to explain these 2 features, as long as you understand how samples work. We can explain these features at a later date</code></p>
<h2 id="light-bounces">Light bounces</h2>
<p>&ldquo;Wait, rays don&rsquo;t bounce infinitely?&rdquo;</p>
<p>Well, in the real world they do, and ideally a good path tracing engine would also, but no computer as of writing can handle the amount of processing power it takes, and we&rsquo;re willing to approximate, so typically path tracing engines have a limit in the amount of bounces they perform <strong>per ray</strong>.</p>
<p>In a nutshell, light bounces are&hellip; the amount of times a ray will bounce before converging (that fancy word again), if they can. There&rsquo;s really 2 main settings to keep in mind</p>
<ul>
<li>Total light bounces (how many bounces a ray can bounce in total)</li>
<li>Material specific bounces (how many bounces can a ray bounce for a specific material)</li>
</ul>
<p>We&rsquo;re not going to focus too much on this, since I think it&rsquo;s self explanatory</p>
<p><code>Sidenote: You may also notice some caustics settings, as well as stuff like filter glossy. Caustics are patterns formed by reflection or reflection, whereas filter glossy allows for less noise (at the cost of accuracy).</code></p>
<p><code>In general, caustics should be disabled unless you have a reason not to, and filter glossy shouldn't be too high (a value of 1 is good enough for most scenes)</code></p>
<p>Here&rsquo;s a diagram (where we have a max of 3 bounces)

    <img src="/imgs/cycles-1/bounces.png"  alt="Light bounces"  class="center"  style="border-radius: 8px;"  />

</p>
<p>Note how the red ray bounces 3 times (which is the max), but the black ray only needs 2. Total light bounces is well, the total amount of light bounces a ray can take.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>&ldquo;Wait, we&rsquo;re already done?&rdquo;</p>
<p>For now yes, I&rsquo;ll be splitting this into multiple parts. What I&rsquo;ve explained today should be enough for understanding how most of the settings in Cycles work. In later parts, I&rsquo;ll be focusing on certain settings, like adaptive sampling or shadow caustics (oooooo, fancy). But we&rsquo;ll leave it here for now.</p>
]]></content>
        </item>
        
        <item>
            <title>Moving On</title>
            <link>https://standingpadanimations.github.io/posts/moving-on/</link>
            <pubDate>Mon, 19 Dec 2022 19:59:51 -0600</pubDate>
            
            <guid>https://standingpadanimations.github.io/posts/moving-on/</guid>
            <description>Hi guys, I think yall might be confused why I&amp;rsquo;ve created a new website, let&amp;rsquo;s talk about it.
But first, what&amp;rsquo;s been going on recently?
Well in short, chaos. The actual situation is much longer, but to put it simply Twitter is no longer (in my opinion) a sustainable platform to remain on, so I moved to Mastodon.
Now because Mastodon allows you to verify your own sites, I&amp;rsquo;ve gone ahead and made this new one, since I felt like it.</description>
            <content type="html"><![CDATA[<p>Hi guys, I think yall might be confused why I&rsquo;ve created a new website, let&rsquo;s talk about it.</p>
<p>But first, what&rsquo;s been going on recently?</p>
<p>Well in short, chaos. The actual situation is much longer, but to put it simply Twitter is no longer (in my opinion) a sustainable platform to remain on, so I moved to Mastodon.</p>
<p>Now because Mastodon allows you to verify your own sites, I&rsquo;ve gone ahead and made this new one, since I felt like it.</p>
<p>Of course, some of you may have also noticed that I&rsquo;m not really doing much 3D. In short, I haven&rsquo;t had much time or motivation to continue working on 3D (but I&rsquo;m getting there, hopefully I&rsquo;ll think of something for New Years). I think I&rsquo;ll try this blogging thing for a bit (I did want to make some in depth guides to Cycles optimization and MCprep itself).</p>
<p>I&rsquo;m also learning how this Hugo thing (what I use to make this) works, so hopefully I&rsquo;ll be able to get my renders back up and running. It&rsquo;ll be a pain and a hassle, but I think it&rsquo;ll be worth it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
